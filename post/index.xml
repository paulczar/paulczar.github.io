<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Paul Czarkowski</title>
    <link>http://tech.paulcz.net/post/</link>
    <description>Recent content in Posts on Paul Czarkowski</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Aug 2017 16:14:53 -0500</lastBuildDate>
    
	<atom:link href="http://tech.paulcz.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>deploy deis with kubicorn</title>
      <link>http://tech.paulcz.net/2017/08/deploy-deis-with-kubicorn/</link>
      <pubDate>Sun, 13 Aug 2017 16:14:53 -0500</pubDate>
      
      <guid>http://tech.paulcz.net/2017/08/deploy-deis-with-kubicorn/</guid>
      <description>blurb about kubicorn here.
Prerequisites You will need a working golang environment&amp;hellip;
you will need AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY set
Deploy Kubernetes to Amazon using Kubicorn Run the following:
$ go get github.com/kris-nova/kubicorn $ kubicorn create --name k8s-deis --profile aws 2017-08-13T16:20:10-05:00 [✔] Selected [fs] state store 2017-08-13T16:20:10-05:00 [✿] The state [./_state/k8s-deis/cluster.yaml] has been created. You can edit the file, then run `kubicorn apply -n k8s-deis` $ kubicorn apply -n k8s-deis 2017-08-13T16:21:56-05:00 [✔] Selected [fs] state store 2017-08-13T16:21:56-05:00 [✔] Loaded cluster: k8s-deis 2017-08-13T16:21:56-05:00 [✔] Init Cluster SSH Key Passphrase [none]: 2017-08-13T16:22:04-05:00 [✔] Query existing resources .</description>
    </item>
    
    <item>
      <title>Flexible Private Docker Registry Infrastructure</title>
      <link>http://tech.paulcz.net/2016/01/flexible-docker-registry-infrastructure/</link>
      <pubDate>Sun, 10 Jan 2016 10:22:22 -0600</pubDate>
      
      <guid>http://tech.paulcz.net/2016/01/flexible-docker-registry-infrastructure/</guid>
      <description>Previously I showed how to run a basic secure Docker Registry. I am now going to expand on this to show you something that you might use in production as part of your CI/CD infrastructure.
The beauty of running Docker is that you can push an image from a developer&amp;rsquo;s laptop all the way into production which helps ensure that what you see in development and your various test/qa/stage environments are exactly the same as what you run in production.</description>
    </item>
    
    <item>
      <title>Deploying a Simple and Secure Docker Registry</title>
      <link>http://tech.paulcz.net/2016/01/deploying-a-secure-docker-registry/</link>
      <pubDate>Sun, 10 Jan 2016 05:22:22 -0600</pubDate>
      
      <guid>http://tech.paulcz.net/2016/01/deploying-a-secure-docker-registry/</guid>
      <description>There comes a time in everybody&amp;rsquo;s life where they realize they have to run their own Docker Registry. Unfortunately there&amp;rsquo;s not a lot of good information on how to run one. Docker&amp;rsquo;s documentation is pretty good, but is verbose and across a lot of different pages which means having half a dozen tabs open and searching for the right information.
While it&amp;rsquo;s pretty common to run the Docker Registry itself with little to no security settings and fronting it with NGINX or Apache to provide this security I wanted to show how it can be done with just the Docker Registry.</description>
    </item>
    
    <item>
      <title>Securing Docker with TLS certificates</title>
      <link>http://tech.paulcz.net/2016/01/secure-docker-with-tls/</link>
      <pubDate>Sun, 03 Jan 2016 14:44:30 -0600</pubDate>
      
      <guid>http://tech.paulcz.net/2016/01/secure-docker-with-tls/</guid>
      <description>By default Docker (and by extension Docker Swarm) has no authentication or authorization on its API, relying instead on the filesystem security of its unix socket /var/run/docker.sock which by default is only accessible by the root user.
This is fine for the basic use case of the default behavior of only accessing the Docker API on the local machine via the socket as the root user. However if you wish to use the Docker API over TCP then you&amp;rsquo;ll want to secure it so that you don&amp;rsquo;t give out root access to anyone that happens to poke you on the TCP port.</description>
    </item>
    
    <item>
      <title>Deploying a HA Docker Swarm Cluster</title>
      <link>http://tech.paulcz.net/2016/01/running-ha-docker-swarm/</link>
      <pubDate>Sat, 02 Jan 2016 14:44:30 -0600</pubDate>
      
      <guid>http://tech.paulcz.net/2016/01/running-ha-docker-swarm/</guid>
      <description>Given Docker&amp;rsquo;s propensity for creating easy to use tools it shouldn&amp;rsquo;t come as a surprise that Docker Swarm is one of the easier to understand and run of the &amp;ldquo;Docker Clustering&amp;rdquo; options currently out there. I recently built some Terraform configs for deploying a Highly Available Docker Swarm cluster on Openstack and learned a fair bit about Swarm in the process.
This guide is meant to be a platform agnostic howto on installing and running a Highly Available Docker Swarm to show you the ideas and concepts that may not be as easy to understand from just reading some config management code.</description>
    </item>
    
    <item>
      <title>Openstacks and Ecosystems</title>
      <link>http://tech.paulcz.net/2016/01/openstacks-and-ecosystems/</link>
      <pubDate>Sat, 02 Jan 2016 13:00:42 -0600</pubDate>
      
      <guid>http://tech.paulcz.net/2016/01/openstacks-and-ecosystems/</guid>
      <description>I have recently had a number of lengthy discussions on the Twitter about Interop, Users, and Ecosystems. Specifically about our need to focus on the OpenStack ecosystem to extend the OpenStack IaaS user experience to something a bit more platform[ish].
I wrote a post for SysAdvent this year on developing applications on top of OpenStack using a collection of OpenSource tools to create a PaaS and CI/CD pipelines. I think it turned out quite well and really helped reinforce my beliefs on the subject.</description>
    </item>
    
  </channel>
</rss>